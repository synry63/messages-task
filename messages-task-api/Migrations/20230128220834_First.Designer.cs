// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using messages_task_api;

#nullable disable

namespace messagestaskapi.Migrations
{
    [DbContext(typeof(MessagesTaskContext))]
    [Migration("20230128220834_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("messages_task_api.Models.HistoryLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeLog")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HistoryLogs");
                });

            modelBuilder.Entity("messages_task_api.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bc69122-8413-42f9-b76e-5a9fd2e3dc10"),
                            Body = "Hello Patrick how are you",
                            DateReceived = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderEmail = "toto@gmail.com",
                            UserId = new Guid("61a82cff-06cd-4a34-b85f-12e2f68d68c0")
                        },
                        new
                        {
                            Id = new Guid("b820fe5e-85b0-4528-b751-a2225319740d"),
                            Body = "I hope you are fine",
                            DateReceived = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderEmail = "toto@gmail.com",
                            UserId = new Guid("61a82cff-06cd-4a34-b85f-12e2f68d68c0")
                        });
                });

            modelBuilder.Entity("messages_task_api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61a82cff-06cd-4a34-b85f-12e2f68d68c0"),
                            Email = "synry63@gmail.com",
                            PasswordHash = "C3TZb8Ef5NcKnL/1CmjTrvYsixij9REwLDVkoK2UvFs=",
                            PasswordSalt = "/DYD9vqoSbSJ9B9b8AoThQ=="
                        },
                        new
                        {
                            Id = new Guid("266e155d-bed4-47e3-a52f-c21eaad773f3"),
                            Email = "toto@gmail.com",
                            PasswordHash = "C3TZb8Ef5NcKnL/1CmjTrvYsixij9REwLDVkoK2UvFs=",
                            PasswordSalt = "/DYD9vqoSbSJ9B9b8AoThQ=="
                        });
                });

            modelBuilder.Entity("messages_task_api.Models.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserNotifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61a82cff-06cd-4a34-b85f-12e2f68d68c0"),
                            Total = 0
                        },
                        new
                        {
                            Id = new Guid("266e155d-bed4-47e3-a52f-c21eaad773f3"),
                            Total = 0
                        });
                });

            modelBuilder.Entity("messages_task_api.Models.HistoryLog", b =>
                {
                    b.HasOne("messages_task_api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("messages_task_api.Models.Message", b =>
                {
                    b.HasOne("messages_task_api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("messages_task_api.Models.UserNotification", b =>
                {
                    b.HasOne("messages_task_api.Models.User", "User")
                        .WithOne("userNotification")
                        .HasForeignKey("messages_task_api.Models.UserNotification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("messages_task_api.Models.User", b =>
                {
                    b.Navigation("userNotification")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
